;;; -*- Mode:Lisp; Syntax:ANSI-Common-Lisp; Coding:utf-8 -*-

(in-package #:cl-random-tests)

(addtest (cl-random-tests)
  uniformized-markov-jump
  (let* ((n 100000)
         (keys #(:a :b :c))
         (rates #(1 2 3))
         (rv (r-uniformized-markov-jump rates :transition-rate 10 :keys keys
                                        :no-change :no-change))
         (possible-keys (concatenate 'vector (vector :no-change) keys))
         (durations (make-array n :element-type 'double-float))
         (jumps (make-array n))
         (*lift-equality-test* #'==))
    (dotimes (i n)
      (setf (values (aref durations i) (aref jumps i)) (draw rv)))
    (let ((*==-tolerance* 0.01d0))
      (ensure-same (mean durations) 0.1))
    (let ((*==-tolerance* 0.1d0))
      (ensure-same (count :a jumps) (* 0.1 n))
      (ensure-same (count :b jumps) (* 0.2 n))
      (ensure-same (count :c jumps) (* 0.3 n))
      (ensure-same (count :no-change jumps) (* 0.4 n)))
    (ensure (every #'nonnegative? durations))
    (ensure (every (lambda (j) (find j possible-keys)) jumps))))

(addtest (cl-random-tests)
  uniformized-markov-jump2
  (let+ ((n 100000)
         (keys #(:a :b :c))
         (rates #(0.1 0.9 1.5))
         (total-rates (sum rates))
         (durations (make-array n :element-type 'double-float))
         (jumps (make-array n))
         ((&flet test-count (key rate)
            (let ((count (count key jumps))
                  (expected (* (/ rate total-rates) n)))
              (format *debug-io*
                      "key: ~A  expected count: ~A  actual count: ~A~%"
                      key (round expected) count)
              (ensure-same count expected))))
         (rv (r-uniformized-markov-jump rates :keys keys))
         (*lift-equality-test* #'==))
    (dotimes (i n)
      (setf (values (aref durations i) (aref jumps i)) (draw rv)))
    (let ((*==-tolerance* 0.01d0))
      (ensure-same (mean durations) (/ total-rates)))
    (let ((*==-tolerance* 0.01d0))
      (map nil #'test-count keys rates))
    (ensure (every #'nonnegative? durations))
    (ensure (every (lambda (j) (find j keys)) jumps))))
